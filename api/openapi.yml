openapi: 3.0.3
info:
  title: crispy
  description: |
    API Контроллера Сервиса "Больше, чем Балансировка Нагрузки" типа Open Source.

    Для начала работы с сервисом, важно убедиться, что заполнены справочники:
    1. `zones`
    1. `clusters`, при создании требует указать `zoneId`
    1. `nodes`, при создании требует указать `clusterId`

    После этого возможно создавать и настраивать `services`,
    каждый при создании требует указать `clusterId`.

    Когда `services` созданы, для каждого могут быть заведены `reals` и `healthchecks`,
    для каждого из них при создании необходим `serviceId`.

    ---

    ## Глоссарий
    ```
    zones        — Зона Безопасности <...>
    clusters     — Кластер Балансировки <...>
    nodes        — Нода <...>
    services     — Сервис Балансировки <...>
    reals        — Реал <...>
    healthchecks — Хелсчек <...>
    ```

  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 'v1.0.0'
externalDocs:
  url: https://sbtatlas.sigma.sbrf.ru/wiki/display/CRISPY
  description: Документация
tags:
  - name: configs
    description: методы чтения Конфигов
  - name: services
    description: методы работы с Сервисами Балансировки
  - name: reals
    description: методы работы с Реалами
  - name: healthchecks
    description: методы работы с Хелсчеками
  - name: nodes
    description: методы работы с Нодами
  - name: clusters
    description: методы работы с Кластерами Балансировки
  - name: zones
    description: методы работы с Зонами Безопасности
servers:
  - url: /api/v1
paths:
  /configs/{nodeId}:
    get:
      tags:
        - configs
      summary: получить список всех Сервисов Балансировки для данной Ноды
      operationId: listConfigsForNode
      responses:
        "200":
          description: массив объектов типа Конфиг
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Config"
  /clusters:
    post:
      tags:
        - clusters
      summary: создать Кластер Балансировки
      operationId: clusterAdd
      requestBody:
        description: При передаче JSON объекта c `name` и `zoneId`, произойдёт создание новой записи в БД с автогенерацией `id`.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Cluster"
      responses:
        "201":
          description: ответ с результирующим объектом
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cluster"
        "303":
          $ref: "#/components/responses/AlreadyExist"
        "400":
          description: некорректный ввод
    get:
      tags:
        - clusters
      summary: получить список всех Кластеров Балансировки
      operationId: clusterGetAll
      responses:
        "200":
          description: массив объектов типа Кластер Балансировки
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Cluster"
  /clusters/{clusterId}:
    get:
      tags:
        - clusters
      summary: получить Кластер Балансировки
      operationId: clusterGetById
      parameters:
        - name: clusterId
          in: path
          description: ID Кластера Балансировки
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: объект типа Кластер Балансировки
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cluster"
    put:
      tags:
        - clusters
      summary: обновить Кластер Балансировки
      operationId: clusterUpdate
      parameters:
        - name: clusterId
          in: path
          description: ID Кластера Балансировки
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Cluster"
      responses:
        "200":
          description: OK
          content: { }
        "400":
          description: некорректный ввод
          content: { }
    delete:
      tags:
        - clusters
      summary: удалить Кластер Балансировки
      operationId: clusterDelete
      parameters:
        - name: clusterId
          in: path
          description: ID Кластера Балансировки
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: контента нет
          content: { }
        "400":
          description: некорректный ввод
          content: { }

  /nodes:
    post:
      tags:
        - nodes
      summary: создать Ноду
      operationId: nodeAdd
      requestBody:
        description: qqq # TODO: При передаче JSON объекта c `name` и `zoneId`, произойдёт создание новой записи в БД с автогенерацией `id`.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Node"
      responses:
        "201":
          description: ответ с результирующим объектом
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Node"
        "303":
          $ref: "#/components/responses/AlreadyExist"
        "400":
          description: некорректный ввод
    get:
      tags:
        - nodes
      summary: получить список всех Нод, либо выбрать их по критериям
      description: В query может быть использован максимум один из вариантов. При указании сразу двух – ошибка 400.
      operationId: findNode
      parameters:
        - name: clusterId
          in: query
          description: UUID Кластера Балансировки
#        - name: addr # TODO
#          in: query
#          description: IPv4 адрес Ноды
#        - name: hostname # TODO
#          in: query
#          description: hostname Ноды
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Node'
        "400":
          description: некорректный ввод
          content: { }
  /nodes/{nodeId}:
    get:
      tags:
        - nodes
      summary: получить Ноду
      operationId: nodeGetById
      parameters:
        - name: nodeId
          in: path
          description: ID Ноды
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: объект типа Нода
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Node"
    delete:
      tags:
        - nodes
      summary: удалить Ноду
      operationId: nodeDelete
      parameters:
        - name: nodeId
          in: path
          description: ID Ноды
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: контента нет
          content: { }
        "400":
          description: некорректный ввод
          content: { }

  /reals:
    post:
      tags:
        - reals
      summary: создать Реал
      operationId: realAdd
      requestBody:
        description: |
          Для создания Реала требуется указать UUID Сервиса Балансировки (`serviceId`),
          а также уникальное сочетание `addr` и `port`.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Real"
      responses:
        "201":
          description: ответ с успешно созданым Реалом
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Real"
        "303":
          $ref: "#/components/responses/AlreadyExist"
        "400":
          description: некорректный ввод
    get:
      tags:
        - reals
      summary: получить список всех Реалов, либо выбрать их по критериям
      description: В query может быть использован максимум один из вариантов. При указании сразу двух – ошибка 400.
      operationId: findReal
      parameters:
        - name: serviceId
          in: query
          description: UUID Сервиса Балансировки
        - name: addr
          in: query
          description: IP адрес Реала
      responses:
        "200":
          description: "successful operation"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Real'
        "400":
          description: некорректный ввод
          content: { }
  /reals/{realId}:
    get:
      tags:
        - reals
      summary: получить Реал
      operationId: realGetById
      parameters:
        - name: realId
          in: path
          description: ID Реала
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: объект типа Реал
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Real"
    delete:
      tags:
        - reals
      summary: удалить Реал
      operationId: realDelete
      parameters:
        - name: realId
          in: path
          description: ID Реала
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: контента нет
          content: { }
        "400":
          description: некорректный ввод
          content: { }

#  /healthchecks/findByService:
#    get:
#      tags:
#        - healthchecks
#      summary: получить Хелсчеки всех типов для Сервиса Балансировки
#      operationId: healthchecksByService
#      parameters:
#        - name: "id"
#          in: query
#          description: UUID Сервиса Балансировки
#          required: true
#          schema:
#            type: string
#            format: uuid
#      responses:
#        "200":
#          description: "successful operation"
#          content:
#            application/json:
#              schema:
#                type: object
#                properties:
#                  http:
#                    type: array
#                    items:
#                      $ref: '#/components/schemas/HealthcheckHTTP'
#                  tcp:
#                    type: array
#                    items:
#                      $ref: '#/components/schemas/HealthcheckTCP'
#                  udp:
#                    type: array
#                    items:
#                      $ref: '#/components/schemas/HealthcheckUDP'
#                  icmp:
#                    type: array
#                    items:
#                      $ref: '#/components/schemas/HealthcheckICMP'
#        "400":
#          description: некорректный ввод
#          content: { }
  /healthchecks/http:
    post:
      tags:
        - healthchecks
      summary: создать Хелсчек типа HTTP
      operationId: healthcheckHTTPAdd
      requestBody:
        description: qqq # TODO:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/HealthcheckHTTP"
      responses:
        "201":
          description: ответ с результирующим объектом
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HealthcheckHTTP"
        "303":
          $ref: "#/components/responses/AlreadyExist"
        "400":
          description: некорректный ввод
  /healthchecks/http/{healthcheckId}:
    put:
      tags:
        - healthchecks
      summary: получить список всех Хелсчеков типа HTTP
      operationId: healthcheckHTTPGetAll
      responses:
        "200":
          description: массив объектов Хелсчек типа HTTP
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/HealthcheckHTTP"

  /services:
    post:
      tags:
        - services
      summary: 'создать Сервис Балансировки'
      operationId: serviceAdd
      requestBody:
        description: |
          При создании Сервиса Балансировки, необходимо указывать `clusterId` существующего Кластера Баласировки.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Service"
      responses:
        "400":
          description: некорректный ввод
    get:
      tags:
        - services
      summary: 'получить список всех Сервисов Балансировки'
      operationId: serviceGetAll
      responses:
        "200":
          description: массив объектов типа Сервисы Балансировки
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Service"
  /services/{serviceId}:
    get:
      tags:
        - services
      summary: 'получить Сервис Блансировки'
      operationId: serviceGetById
      parameters:
        - name: serviceId
          in: path
          description: ''
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: объект типа Сервис Балансировки
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Service"
    delete:
      tags:
        - services
      summary: 'удалить Сервис Балансировки'
      operationId: serviceDeleteById
      parameters:
        - name: serviceId
          in: path
          description: |
            **IMPORTANT**: Удаление Сервиса Балансировки удаляет также все связанные `[]real` и `[]healthcheck`
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: контента нет
          content: { }
        "400":
          description: некорректный ввод
          content: { }

  /zones:
    post:
      tags:
        - zones
      summary: создать Зону Безопасности
      operationId: zoneAdd
      requestBody:
        description: При передаче JSON объекта с `name`, произойдёт создание новой записи в БД с автогенерацией `id`.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Zone"
      responses:
        "201":
          description: ответ с результирующим объектом
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Zone"
        "303":
          $ref: "#/components/responses/AlreadyExist"
        "400":
          description: некорректный ввод

    get:
      tags:
        - zones
      summary: получить список всех Зон Безопасности
      #      description: Запрос возвращает все созданные ранее Зоны Безопасности.
      operationId: zoneGetAll
      responses:
        "200":
          description: массив объектов типа Зона Безопасности
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Zone"
  /zones/{zoneId}:
    get:
      tags:
        - zones
      summary: получить Зону Безопасности
      operationId: zoneGetById
      parameters:
        - name: zoneId
          in: path
          description: ID Зоны Безопасности
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: объект типа Зона Безопасности
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Zone"
    put:
      tags:
        - zones
      summary: обновить Зону Безопасности
      operationId: zoneUpdate
      parameters:
        - name: zoneId
          in: path
          description: ID Зоны Безопасности
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        #        description: При передаче объекта с `name`, произойдёт создание новой записи в БД с автогенерацией `id`.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Zone"
      responses:
        "200":
          description: OK
          content: { }
        "400":
          description: некорректный ввод
          content: { }

    delete:
      tags:
        - zones
      summary: удалить Зону Безопасности
      operationId: zoneDelete
      parameters:
        - name: zoneId
          in: path
          description: ID Зоны Безопасности
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: контента нет
          content: { }
        "400":
          description: некорректный ввод
          content: { }

components:
  schemas:
    Config:
      description: |
        Конфиг —
      allOf:
        - $ref: '#/components/schemas/Service'
        - type: object
          properties:
            zoneId:
              type: string
              format: uuid
              description: qq # TODO
            clusterId:
              type: string
              format: uuid
              description: qq # TODO

    Cluster:
      description: |
        Кластер Балансировки — группа физических серверов либо виртуальных машин, обеспечивающих отказоустойчивость спланированных на такой Кластер Сервисов Балансировки.
      type: object
      required:
        - name
        - zoneId
        - capacity
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: уникальный ID Кластера Балансировки
        zoneId:
          type: string
          format: uuid
          description: ID Зоны Безопасности
        name:
          type: string
          description: имя Кластера Балансировки
        capacity:
          type: number
          description: предел утилизации Кластера Балансировки
        usage:
          type: number
          readOnly: true
          description: текущая утилизация (вычисляемое значение)
        nodes:
          type: array
          items:
            $ref: '#/components/schemas/Node'
          readOnly: true
          description: Ноды, входящие в Кластер Балансировки

    HealthcheckICMP:
      description: |
        Хелсчек -- описание механизма и параметров проверки для каждого сервера, куда производится балансировки Сервисом Балансировки
      type: object
      required:
        - addr
        - helloTimer
        - responseTimer
        - aliveThreshold
        - deadThreshold
        - quorum
        - hysteresis
      properties:
        id:
          type: number
          format: uuid
          readOnly: true
        helloTimer:
          type: number
          description: таймер приветствия # FIXME: add details
        responseTimer:
          type: number
          description: таймер ответа # FIXME: add details
        aliveThreshold:
          type: number
          description: порог успешных последовательных проверок для включения в балансировку
        deadThreshold:
          type: number
          description: порог проваленных последовательно проверок для исключения из балансировки
        quorum:
          type: number
          description: кворум # FIXME: add details
        hysteresis:
          type: number
          description: гистере́зис # FIXME: add details
        addr:
          type: string
          format: ipv4
          description: ip адрес, куда производится healthcheck обращение

    HealthcheckTCP:
      allOf:
        - $ref: '#/components/schemas/HealthcheckICMP'
        - type: object
          required:
            - port
          properties:
            port:
              type: number
              description: порт, куда производится healthcheck обращение

    HealthcheckUDP:
      allOf:
        - $ref: '#/components/schemas/HealthcheckICMP'
        - type: object
          required:
            - port
          properties:
            port:
              type: number
              description: порт, куда производится healthcheck обращение

    HealthcheckHTTP:
      allOf:
        - $ref: '#/components/schemas/HealthcheckICMP'
        - type: object
          required:
            - port
            - uri
            - responseCode
          properties:
            port:
              type: number
              description: порт, куда производится healthcheck обращение
            uri:
              type: string
              description: uri, куда производится healthcheck обращение
            responseCode:
              type: number
              description: код ответа http сервера ожидаемый для "здорового" ответа

    Node:
      description: |
        Нода -- сервер, обеспечивающий балансировку и входящий в один из Кластеров Балансировки.
      type: object
      required:
        - addr
      properties:
        id:
          type: number
          readOnly: true
          description: уникальный id Ноды
        clusterId:
          type: string
          format: uuid
          description: id Кластера Балансировки, в который входит Нода
        addr:
          type: string
          format: ipv4
          description: ip адрес Ноды
        hostname:
          type: string
          description: dns имя хоста

    Real:
      description: |
        Реал -- сервер, на который производится балансировка Сервисом Балансировки. Значения `addr` + `port` образуют уникальный кортеж и не могут повторяться.
      type: object
      required:
        - serviceId
        - addr
        - port
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: уникальный id Реала
        serviceId:
          type: string
          format: uuid
          description: uuid Сервиса Балансировки
        addr:
          type: string
          format: ipv4
          description: ip адрес Реала
        port:
          type: number
          description: порт Реала

    Service:
      description: |
        Сервис Балансировки
      required:
        - clusterId
        - balancingType
        - routingType
        - bandwidth
        - proto
        - addr
        - port
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: уникальный ID Сервиса Балансировки
        clusterId:
          type: string
          format: uuid
          description: уникальный ID Кластера Балансировки, на котором планируется Сервис Балансировки
        balancingType:
          type: string
          enum: [ round-robin, source-ip, source-ip-port, least-connection, uri, url-param, hdr, random, rdp-cookie ]
          description: тип балансировки
        routingType:
          type: string
          enum: [ nat, tunnel, gre-tunnel ]
          description: тип маршрутизации
        proto:
          type: string
          enum: [ tcp, udp ]
          description: протокол балансировки
        addr:
          type: string
          format: ipv4
          description: адрес Сервиса Балансировки aka `Virtual IP`/`VIP`
        port:
          type: number
          description: порт Сервиса Балансировки
        bandwidth:
          type: number
          description: величина требуемого резерва полосы пропускания
        reals:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/Real'
          description: список адресов, на которые производится балансировка
        healthchecks:
          type: array
          readOnly: true
          items:
            anyOf:
              - $ref: '#/components/schemas/HealthcheckHTTP'
              - $ref: '#/components/schemas/HealthcheckTCP'
              - $ref: '#/components/schemas/HealthcheckUDP'
              - $ref: '#/components/schemas/HealthcheckICMP'
          description: список конфигураций хелсчека

    Zone:
      description: |
        Зона Безопасности
      type: object
      required:
        - name
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
          description: уникальный id Зоны Безопасности
        name:
          type: string
          description: имя Зоны Безопасности

  responses:
    AlreadyExist:
      description: объект уже существует
      headers:
        Location:
          description: redirect location
          example: asd
          schema:
            type: string
