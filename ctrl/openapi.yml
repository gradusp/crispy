openapi: 3.0.3
info:
  title: LBOS Controller API
  description: |
    API Контроллера Сервиса "Больше, чем Балансировка Нагрузки" типа Open Source
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 'v1.0.0'
tags:
  - name: clusters
    description: методы работы с Кластерами Балансировки
  - name: security-zones
    description: методы работы с Зонами Безопасности
#  - name: balancing-services
#    description: методы работы с Сервисами Балансировки
#  - name: clusters
#    description: методы работы с Кластерами
#  - name: orders
#    description: методы работы с Заказами
servers:
  - url: http://localhost:8080/api/v1
paths:
  /clusters:
    post:
      tags:
        - clusters
      summary: создать Кластер Балансировки
      operationId: addCluster
      requestBody:
        description: При передаче JSON объекта c `name` и `securityZoneId`, произойдёт создание новой записи в БД с аавтогенерацией `id`.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Cluster"
      responses:
        "201":
          description: ответ с результирующим объектом
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cluster"
  /security-zones:
    post:
      tags:
        - security-zones
      summary: создать Зону Безопасности
      operationId: addSecurityZone
      requestBody:
        description: При передаче JSON объекта с `name`, произойдёт создание новой записи в БД с автогенерацией `id`.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SecurityZone"
      responses:
        "201":
          description: ответ с результирующим объектом
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SecurityZone"
        "303":
          $ref: "#/components/responses/AlreadyExist"
        "400":
          description: некорректный ввод
        "401":
          $ref: "#/components/responses/UnauthorizedError"

    get:
      tags:
        - security-zones
      summary: получить список всех Зон Безопасности
      #      description: Запрос возвращает все созданные ранее Зоны Безопасности.
      operationId: getSecurityZones
      responses:
        "200":
          description: массив объектов типа Зона Безопасности
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SecurityZone"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /security-zones/{securityZoneId}:
    put:
      tags:
        - security-zones
      summary: обновить Зону Безопасности
      operationId: updateSecurityZone
      parameters:
        - name: securityZoneId
          in: path
          description: ID Зоны Безопасности
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        #        description: При передаче объекта с `name`, произойдёт создание новой записи в БД с автогенерацией `id`.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SecurityZone"
      responses:
        "200":
          description: OK
          content: { }
        "400":
          description: некорректный ввод
          content: { }

    delete:
      tags:
        - security-zones
      summary: удалить Зону Безопасности
      operationId: deleteSecurityZone
      parameters:
        - name: securityZoneId
          in: path
          description: ID Зоны Безопасности
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: контента нет
          content: { }
        "400":
          description: некорректный ввод
          content: { }



#  /clusters: # TODO: кластер балансировки t1 может не существовать в момент Заказа
#    post:
#      tags:
#        - clusters
#      summary: aa
#      operationId: addCluster
#      requestBody:
#        description: aa
#        content:
#          application/json:
#            schema:
#              $ref: "#/components/schemas/Cluster"
#      responses:
#        201:
#          description: Created
#          content:
#            application/json:
#              schema:
#                type: object
#                properties:
#                  id:
#                    type: string
#                    format: uuid
#                    description: ID созданного Кластера (в формате uuid)
#          links:
#            GetClusterByClusterId:
#              operationId: getClusterById
#              parameters:
#                clusterId: '$response.body#/id'
#              description: >
#                The `id` value returned in the response can be used as
#                the `clusterId` parameter in `GET /clusters/{clusterId}`.
#        405:
#          description: Invalid input
#    get:
#      tags:
#        - clusters
#      responses:
#    put:
#      tags:
#        - clusters
#      responses:
#
#  /clusters/{clusterId}:
#    get:
#      tags:
#        - clusters
#      summary: найти Кластер по ID
#      description: возвращает один Кластер
#      operationId: getClusterById
#      responses:
#    post:
#      tags:
#        - clusters
#      responses:
#    delete:
#      tags:
#        - clusters
#      responses:
#
#  /balancing-services:
#    put:
#      tags:
#        - balancing-services
#      summary: Обновить существующий Сервис Балансировки
#      requestBody:
#        description: Сервис Балансировки, который требуется обновить
#        content:
#          application/json:
#            schema:
#              $ref: '#/components/schemas/BalancingService'
#        required: true
#      responses:
#        400:
#          description: Invalid ID supplied
#          content: { }
#        404:
#          description: Сервис Балансировки не найден
#          content: { }
#        405:
#          description: Ошибка валидации
#          content: { }
#    post:
#      tags:
#        - balancing-services
#      summary: Создать новый Сервис Балансировки
#      requestBody:
#        # description:
#        content:
#          '*/*':
#            schema:
#              $ref: '#/components/schemas/BalancingService'
#      responses:
#        200:
#          description: OK
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/BalancingService'
#        400:
#          description: Invalid Order
#          content: { }
#    get:
#      tags:
#        - balancing-services
#      summary: Получить список всех Сервисов Балансировки
#      responses:
#        default:
#          description: ааа
#          content: { }
#  /balancing-services/{bsId}:
#    get:
#      tags:
#        - balancing-services
#      summary: Найти Сервис Балансировки по ID
#      description: Возвращает один Сервис Балансировки
#      parameters:
#        - name: bsId
#          in: path
#          description: ID запрашиваемого Сервиса Балансировки
#          required: true
#          schema:
#            type: string
#            format: uuid
#      responses:
#        200:
#          description: successful operation
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/BalancingService'
#        400:
#          description: invalid ID supplied
#          content: { }
#        404:
#          description: сервис балансировки не найден
#          content: { }
#
#  /orders:
#    post:
#      tags:
#        - orders
#      summary: создать Заказ
#      operationId: addOrder
#      requestBody:
#        description: объект Заказа, который следует добавить
#        content:
#          application/json:
#            schema:
#              $ref: "#/components/schemas/Order"
#        required: true
#      responses:
#        201:
#          description: Created
#          content:
#            application/json:
#              schema:
#                type: object
#                properties:
#                  id:
#                    type: string
#                    format: uuid
#                    description: ID созданного Заказа (в формате uuid)
#        #          links:
#        #            GetOrderByOrderId:
#        #              opertaionId: pipisaOrder
#        #              parameters:
#        #                pipisa: "$response.body#/id"
#        #              description: >
#        #                The `id` value returned in the response can be used
#        405:
#          description: некорректный ввод
#        401:
#          $ref: "#/components/responses/UnauthorizedError"
#
#    get:
#      tags:
#        - orders
#      summary: получить список всех Заказов
#      description: aaa
#      operationId: getOrders
#      responses:
#        200:
#          description: массив Заказов
#          content:
#            application/json:
#              schema:
#                type: array
#                items:
#                  $ref: "#/components/schemas/Order"
#        401:
#          $ref: "#/components/responses/UnauthorizedError"
#
#    put:
#      tags:
#        - orders
#      summary: обновить существующий Заказ
#      operationId: updateOrder
#      requestBody:
#        description: объект Заказа, который требуется обновить
#        content:
#          application/json:
#            schema:
#              $ref: "#/components/schemas/Order"
#        required: true
#      responses:
#        400:
#          description: указан неверный ID
#        401:
#          $ref: "#/components/responses/UnauthorizedError"
#        404:
#          description: Заказ не найден
#        405:
#          description: ошибка валидации
#
#  /orders/{orderId}:
#    get:
#      tags:
#        - orders
#      summary: найти Заказ по ID
#      description: Возвращает единственный Заказ
#      operationId: getOrderById
#      parameters:
#        - name: orderId
#          in: path
#          description: aa
#          required: true
#          schema:
#            type: string
#            format: uuid
#      responses:
#        200:
#          description: успешная операция
#          content:
#            application/json:
#              schema:
#                $ref: "#/components/schemas/Order"
#        400:
#          description: указан неверный ID
#        401:
#          $ref: "#/components/responses/UnauthorizedError"
#        404:
#          description: Заказ не найден
#    post:
#      tags:
#        - orders
#      summary: обновить Заказ через даные формы
#      description: Для Заказа с `{orderId}` обновляются данные, переданные в `application/x-www-form-urlencoded`
#      operationId: updateOrderWithForm
#      parameters:
#        - name: orderId
#          in: path
#          description: bb
#          required: true
#          schema:
#            type: string
#            format: uuid
#      requestBody:
#        content:
#          application/x-www-form-urlencoded:
#            schema:
#              properties:
#                name:
#                  type: string
#                  description: bb
#                status:
#                  type: string
#                  description: bb
#      responses:
#        401:
#          $ref: "#/components/responses/UnauthorizedError"
#        405:
#          description: некорректный ввод
#    delete:
#      tags:
#        - orders
#      summary: удалить Заказ
#      operationId: deleteOrder
#      parameters:
#        - name: orderId
#          in: path
#          description: ID Заказ для удаления
#          required: true
#          schema:
#            type: string
#            format: uuid
#      responses:
#        400:
#          description: указан неверный ID
#        401:
#          $ref: "#/components/responses/UnauthorizedError"
#        404:
#          description: Заказ не найден

components:
  schemas:
#    BalancingService:
#      required:
#        - something
#      type: object
#      properties:
#        id:
#          type: string
#          format: uuid
#          readOnly: true
#        cluster:
#          $ref: '#/components/schemas/Cluster'
#        order:
#          $ref: '#/components/schemas/Order'
#        vips:
#          type: array
#          items:
#            $ref: '#/components/schemas/Vip'

    Cluster:
      type: object
      properties:
        id:
          description: уникальный ID Кластера (в формате UUIDv4)
          type: string
          format: uuid
          readOnly: true
#        datacenter:
#          description: массив строк с названиями ЦОДов, в кторых размещаются ноды Кластера
#          type: array
#          items:
#            type: string
#            enum: [ SKO, MCOD, AWS, GCR, Azure ]
        name:
          description: имя Кластера
          required: true
          type: string
        #          readOnly: true
        securityZoneId:
          description: ID Зоны Безопасности
          required: true
          type: string
          format: uuid
        capacity:
          description: предел утилизации
          required: true
          type: number
        usage:
          description: текущая утилизация (вычисляемое значение)
          type: number
          readOnly: true

#    Order:
#      type: object
#      properties:
#        id:
#          type: string
#          format: uuid
#          readOnly: true
#        typeId:
#          type: string
#          readOnly: true
#          enum: [ create, delete, update ]
#        createdAt:
#          readOnly: true
#          type: string
#          format: date-time
#        source:
#          type: string
#          format: hostanme
#        raw:
#          type: string
#        serviceManagerId: # TODO: SM ID создаётся постфактум - нужно иметь возможность апдейтить со стороны API
#          type: string
#          nullable: true

    # TODO: rip seczone for VIP
    # TODO: add qos key
#    Vip:
#      type: object
#      properties:
#        id:
#          type: string
#          format: uuid
#          readOnly: true
#        proto:
#          type: string
#          enum: [ tcp, udp ]
#        address:
#          type: string
#          format: ipv4
#        port:
#          type: number
#        routingType: # TODO: move routingType to ORDER level
#          type: string
#          enum: [ nat, tunnel, gre-tunnel ]
#        balancingType: # TODO: discuss supportive field for b_type
#          type: string
#          enum: [ round-robin, source-ip, source-ip-port, least-connection, uri, url-param, hdr, random, rdp-cookie ]
#        reals:
#          type: array
#          items:
#            $ref: '#/components/schemas/Real'
#        healthchecks:
#          type: array
#          items:
#            $ref: '#/components/schemas/Healthcheck'
#    #        security_zone:
#    #          $ref: '#/components/schemas/SecurityZone'

#    Healthcheck:
#      type: object
#      properties:
#        id:
#          type: string
#          format: uuid
#          readOnly: true
#        config:
#          type: string
#        helloTimer:
#          type: number
#        responseTimer:
#          type: number
#        aliveTreshold:
#          type: number
#        deadTreshold:
#          type: number
#        quorum:
#          type: number
#        hysteresis:
#          type: number

#    Real:
#      type: object
#      properties:
#        id:
#          type: string
#          format: uuid
#          readOnly: true
#        datacenter:
#          type: string
#        security_zone:
#          $ref: '#/components/schemas/SecurityZone'
#        address:
#          type: string
#          format: ipv4
#        port:
#          type: number

    SecurityZone:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string

  responses:
    UnauthorizedError:
      description: ключ API отсутствует или неверный
      headers:
        LBOS_API_KEY:
          description: auth header
          schema:
            type: string
    AlreadyExist:
      description: объект уже существует
      headers:
        Location:
          description: redirect location
          example: asd
          schema:
            type: string

  securitySchemes:
    api_key:
      type: apiKey
      in: header
      name: LBOS_API_KEY

security:
  - api_key: [ ]
