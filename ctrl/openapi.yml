openapi: 3.0.3
info:
  title: LBOS Controller API
  description: |
    API Контроллера Сервиса "Больше, чем Балансировка Нагрузки" типа Open Source
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 'v1.0.0'
tags:
  - name: security-zones
    description: методы работы со справочником "Зоны Безопасности"
servers:
  - url: http://localhost:8080/api/v1
paths:
  /security-zones:
    post:
      tags:
        - security-zones
      summary: Создать Зону Безопасности
      operationId: addSecurityZone
      requestBody:
        description: При передаче объекта с `name`, произойдёт создание новой записи в БД с автогенерацией `id`.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SecurityZone"
      responses:
        "201":
          description: ответ с результирующим объектом
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SecurityZone"
        "303":
          $ref: "#/components/responses/AlreadyExist"
        "400":
          description: некорректный ввод
        "401":
          $ref: "#/components/responses/UnauthorizedError"

    get:
      tags:
        - security-zones
      summary: Получить список всех Зон Безопасности
      operationId: getSecurityZones
      responses:
        "200":
          description: массив объектов типа Зона Безопасности
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SecurityZone"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /security-zones/{securityZoneId}:
    get:
      tags:
        - security-zones
      summary: Получить объект Зона Безопасности, передав её ID
      operationId: getSecurityZoneById
      parameters:
        - name: securityZoneId
          in: path
          description: ID Зоны Безопасности
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: объект типа Зона Безопасности
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SecurityZone"

        "401":
          $ref: "#/components/responses/UnauthorizedError"

    put:
      tags:
        - security-zones
      summary: Создать Зону Безопасности
      operationId: updateSecurityZone
      parameters:
        - name: securityZoneId
          in: path
          description: ID Зоны Безопасности
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SecurityZone"
      responses:
        "200":
          description: OK
          content: { }
        "400":
          description: некорректный ввод
          content: { }

    delete:
      tags:
        - security-zones
      summary: Удалить Зону Безопасности
      operationId: deleteSecurityZone
      parameters:
        - name: securityZoneId
          in: path
          description: ID Зоны Безопасности
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: контента нет
          content: { }
        "400":
          description: некорректный ввод

components:
  schemas:
    BalancingService:
      required:
        - something
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        cluster:
          $ref: '#/components/schemas/Cluster'
        order:
          $ref: '#/components/schemas/Order'
        vips:
          type: array
          items:
            $ref: '#/components/schemas/Vip'

    Cluster:
      type: object
      properties:
        id:
          description: уникальный ID Кластера (в формате UUIDv4)
          type: string
          format: uuid
          readOnly: true
        datacenter:
          description: массив строк с названиями ЦОДов, в кторых размещаются ноды Кластера
          type: array
          items:
            type: string
            enum: [ SKO, MCOD, AWS, GCR, Azure ]
        name:
          description: имя Кластера
          type: string
        #          readOnly: true
        security_zone:
          $ref: '#/components/schemas/SecurityZone'
        util_current:
          description: текущая утилизация (вычисляемое значение)
          type: number
          readOnly: true
        util_total:
          description: предел утилизации
          type: number

    Order:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        typeId:
          type: string
          readOnly: true
          enum: [ create, delete, update ]
        createdAt:
          readOnly: true
          type: string
          format: date-time
        source:
          type: string
          format: hostanme
        raw:
          type: string
        serviceManagerId: # TODO: SM ID создаётся постфактум - нужно иметь возможность апдейтить со стороны API
          type: string
          nullable: true

    # TODO: rip seczone for VIP
    # TODO: add qos key
    Vip:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        proto:
          type: string
          enum: [ tcp, udp ]
        address:
          type: string
          format: ipv4
        port:
          type: number
        routingType: # TODO: move routingType to ORDER level
          type: string
          enum: [ nat, tunnel, gre-tunnel ]
        balancingType: # TODO: discuss supportive field for b_type
          type: string
          enum: [ round-robin, source-ip, source-ip-port, least-connection, uri, url-param, hdr, random, rdp-cookie ]
        reals:
          type: array
          items:
            $ref: '#/components/schemas/Real'
        healthchecks:
          type: array
          items:
            $ref: '#/components/schemas/Healthcheck'
    #        security_zone:
    #          $ref: '#/components/schemas/SecurityZone'

    Healthcheck:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        config:
          type: string
        helloTimer:
          type: number
        responseTimer:
          type: number
        aliveTreshold:
          type: number
        deadTreshold:
          type: number
        quorum:
          type: number
        hysteresis:
          type: number

    Real:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        datacenter:
          type: string
        security_zone:
          $ref: '#/components/schemas/SecurityZone'
        address:
          type: string
          format: ipv4
        port:
          type: number

    SecurityZone:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string

  responses:
    UnauthorizedError:
      description: ключ API отсутствует или неверный
      headers:
        LBOS_API_KEY:
          description: auth header
          schema:
            type: string
    AlreadyExist:
      description: объект уже существует
      headers:
        Location:
          description: redirect location
          example: asd
          schema:
            type: string

  securitySchemes:
    api_key:
      type: apiKey
      in: header
      name: LBOS_API_KEY

security:
  - api_key: [ ]
